// 변수의 유효 범위(scope) | 변수의 생존 주기(life cycle) | 정적변수(static) | 전역변수(global) | 지역변수(local)
// p141에 필기 빡시게 해놨음

#include <stdio.h>

//stack(high address) --> 일시적
//heap(필요에 의해 동적으로 메모리를 할당할 때 사용) --> heap 영역 : 할당해야 할 메모리의 크기를 프로그램이 실행되는 동안 결정해야 하는 경우(런 타임때) 유용하게 사용되는 공간
//data(low address) --> 실행~종료

//프로그램 전반에 걸쳐서 값을 계속 사용해야 하는 경우라면 전역변수나 정적 변수를 이용

//정적변수(static) 후입선출 : static으로 선언된 변수로 함수 안에서 선언되면 그 함수 안에서만 사용할 수 있다는 점은 지역변수와 같지만 컴파일 시 데이터(data) 영역에 메모리가 할당되어 프로그램이 종료될 때까지 그 값을 유지한다는 특성을 가짐. 
//따라서 함수나 블록이 종료되어도 그 값이 소멸되지 않고 그대로 남아있다가 그 곳을 다시 실행하면 보존된 값으로 계속 실행됨. 
//초기 지정값이 없으면 0으로 자동 초기화 되고, 프로그램 실행 시 단 한번만 초기화 됨.

//전역변수(global variables) : 함수 밖이나 외부파일에서 선언되어 프로그램 전체에 걸쳐 사용될 수 있는 변수를 말함. 
//전역변수는 초기화를 하지 않아도 0으로 자동 초기화 된다.

//지역변수(local variables)  :특정 범위 내에서만 통용되는 변수로서 선언된 블록이나 함수 내에서만 사용이 가능함.
//지역변수는 life cycle이 { }(블록) 내에서 한정됨.
//지역변수는 초기화를 하지 않으면 쓰레기 값(garbage)을 가짐.

int glo = 1; //전역변수 --> 메모리 data영역에 glo = 1이 할당

void fun(int a){
    int x = 1;
    static int sta = 1; //정적변수 --> 메모리 data영역에 sta = 1이 할당당

    x++;
    sta++;
    glo++;
    
    printf("%d %d %d\n", x, sta, glo);
}

int main(){
    int Q = 2; //지역변수
    {
        int r = 3;      //블록이 닫히는 순간 메모리 상에서
        char c = 'a';   //c라는 변수와 r이라는 변수는 사라짐
    }

    fun(5);     //2 2 2  
    fun(10);    //2 3 3 : x는 fun(5) 함수를 나간 후 stack영역에서 사라지므로 fun(10) 함수가 선언되었을 때 다시 x = 1이 할당되고
                //        sta와 glo는 data 영역에서 사라지지 않고 계속 할당되어 있으므로 fun(10)이 선언되면 값이 둘 다 3으로 바뀐다.

    int s = 5;

    return 0; //프로그램이 return 0;로 끝나면 지역 변수들은 메모리 상(stack영역)에서 완전히 사라지고 프로그램이 종료됨과 동시에 data영역에 있던 변수들도 전부 사라짐.
}
