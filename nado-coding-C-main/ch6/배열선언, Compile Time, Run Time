
//배열 크기는 "컴파일 타임"에 결정됨
//배열 크기는 "컴파일 타임"에 결정됨
//배열 크기는 "컴파일 타임"에 결정됨

/*
#include <stdio.h>

int main(void){
	int size = 10;
	int arr[size];  // ❌ C90에서는 불가능, c에서는 배열의 크기를 반드시 상수로 지정해야하고 size는 변수이므로, arr[size]처럼 배열 크기를 동적인 값으로 지정할 수 없다.

	return 0;
}
*/


///////////////////////////////////////////////


//해결방법 1(상수를 사용하기(#define))

#include <stdio.h>

#define SIZE 10 //#define을 사용하면 기호(이름)를 특정 값으로 대체할 수 있고 일반적으로 기호 상수를 정의할 때 사용.

/*
✅ #define SIZE 10 (매크로 상수)
	✔️ 컴파일 과정에서 SIZE가 10으로 치환됨
	✔️ 배열 크기는 "컴파일 타임"에 결정됨
	✔️ 즉, int arr[10];과 동일한 코드로 변환되어 컴파일 가능

	#define SIZE 10  // 매크로 상수
	int arr[SIZE];  // ✅ 정상 동작

*/

//#define 은 전역변수가 아님!! 전역변수는 메모리에 저장되지만, #define은 단순한 문자열 치환이기 때문
/*

#define과 전역변수의 차이점
구분 : 				  #define (매크로)             ----	      전역변수 (global variable)
저장 위치 :		저장되지 않음 (컴파일 시 치환) 		||	데이터 영역에 저장
자료형 :						없음	||	자료형 존재 (int, float 등)
메모리 사용 : 			중복 치환 (메모리 증가 가능)	||	한 번만 저장 (효율적)
디버깅 :	어려움 (치환되므로 원본 코드 확인 어려움)	||	디버깅 용이

*/


int main(void) {
    int size = 10;
    int arr[SIZE];  // ✅ 가능 (매크로 상수 사용)

    printf("배열 크기: %d\n", size);
    return 0;
}


////////////////////////


/*

//해결방법 2(동적 메모리 할당(malloc) 사용)

#include <stdio.h>
#include <stdlib.h>  // malloc 사용을 위해 필요

int main() {
    int size = 10;
    int *arr = (int*)malloc(size * sizeof(int));  // ✅ 가능 (동적 메모리 할당)

    if (arr == NULL) {
        printf("메모리 할당 실패!\n");
        return 1;
    }

    printf("배열 생성 성공!\n");

    free(arr);  // 메모리 해제
    return 0;
}

*/


//🔥 🔥 🔥 컴파일 타임(Compile Time)과 런타임(Runtime)의 차이🔥 🔥 🔥
/*
1️⃣ 컴파일 타임(Compile Time)
		-프로그램이 컴파일될 때 발생하는 시간
		-소스 코드가 기계어(실행 파일)로 변환되는 과정
		-문법 오류(Syntax Error)나 자료형 오류(Type Error) 등이 발생하는 시점
		
		-개발자가 작성한 **C 코드(.c 파일)**를 기계어로 변환하는 과정
		-코드에 **문법 오류(Syntax Error)**가 있으면 컴파일이 실패함
		-컴파일이 성공해야 실행 파일(.exe 또는 .out)이 생성됨

		✅ 컴파일 과정 (C 프로그램 기준)
		소스 코드(.c) → 전처리기(Preprocessor) → 컴파일(Compile) → 어셈블(Assemble) → 링킹(Linking) → 실행 파일(.exe 또는 .out)

		!!! 이 단계에서 실행되는 게 아님!!!(🔥컴파일 타임은 준비 단계, 런타임이 실행 단계🔥) -> 컴파일 타임(Compile Time)은 프로그램이 실행되는 과정이 아니라, 실행할 준비를 하는 과정. 따라서 코드를 기계어(실행 파일)로 변환하는 과정일 뿐, 실제 실행하는 단계는 아니다.
		


✅ 특징
	✔️ 프로그램 실행 전에 발생
	✔️ 변수의 자료형, 배열 크기 등 고정된 값 필요
	✔️ #define, const 등의 값은 컴파일 타임에 결정됨

✅ 예제 (컴파일 타임 오류)
#include <stdio.h>

int main() {
    int x = "hello";  // ❌ 컴파일 오류 (자료형 불일치)
    return 0;
}

*/

/*
2️⃣ 런타임(Runtime)
		-프로그램이 실행될 때 발생하는 시간
		-실행 중에 메모리 할당, 연산, 사용자 입력 처리 등이 이루어짐
		-실행 오류(Runtime Error), 논리 오류(Logic Error)가 발생할 수 있음

✅ 특징
	✔️ 프로그램 실행 중에 동작
	✔️ 변수 값이 변경될 수 있음
	✔️ 배열 크기, 사용자 입력 값 등이 실행 중에 결정될 수 있음

#include <stdio.h>

int main() {
    int a = 10, b = 0;
    printf("%d\n", a / b);  // ❌ 런타임 오류 (0으로 나누기)
    return 0;
}

*/

//한줄요약
//컴파일 타임이 먼저 실행되어 코드가 변환된 후, 런타임에서 실제 프로그램이 실행된다!





















