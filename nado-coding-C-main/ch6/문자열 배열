/*
✅ char 타입에서 0은 \0(널 문자)와 동일함!!
	- \0은 아스키코드로 정수값 0과 동일한 문자.
	- char 타입은 1바이트(8비트) 크기의 정수를 저장할 수 있어서, 0을 저장하면 자동으로 널 문자(\0)와 동일한 의미가 됨.
#include <stdio.h>

int main() {
    char a = 0;    // 숫자 0 저장
    char b = '\0'; // 널 문자 저장 (같은 값)
    
    if (a == b) {
        printf("a와 b는 동일합니다.\n");  // ✅ 출력됨!
    }
    
    printf("a의 값: %d\n", a);  // 0 출력
    printf("b의 값: %d\n", b);  // 0 출력
    return 0;
}

✔ 따라서 char x = 0; 과 char x = '\0'은 같은 의미임, 널문자는 단순한 숫자 0이지만, 문자열 종료를 의미하는 특별한 역할을 함. ✔

*/

#include <stdio.h>

int main(void) {
    char c_array[10] = {'c', 'o', 'd', 'i', 'n', 'g'};

    printf("문자열 출력: %s\n", c_array); //coding을 제외한 나머지 배열 4개에는 0으로 초기화 되는데 char형에서 0은 아스키코드 값으로 \0(널문자)이므로  %s로 출력했을때 coding까지만 출력됨
    
	// 아스키코드 값 0(\0, 널 문자)은 "아무것도 없는 것처럼 보이는 값"이지만, 실제로는 메모리에 존재하는 값

    printf("배열의 모든 요소: ");
    for (int i = 0; i < 10; i++) {
        printf("%d ", c_array[i]);  // ASCII 코드 값 출력
    }

    return 0;
}

/*
#include <stdio.h>

int main(void) {
    int int_array[10] = {1, 2, 3, 4, 5};  //int배열도 1,2,3,4,5로 일부만 초기화 했을 때 나머지 5개는 0으로 초기화됨

    printf("%s", int_array);  // ❌ 문제 발생! (int 배열은 문자열이 아님)

    for (int i = 0; i < 10; i++) {
    printf("%d ", int_array[i]);  // ✅ %d 사용 (int형 배열 이므로)
    }

    return 0;
}

*/


/*
✅ 결론
	char c_array[10] = {'c', 'o', 'd', 'i', 'n', 'g'};의 나머지 요소는 자동으로 0(char형 이므로  ASCII --> \0)이 됨.
	printf("%s", c_array);는 \0을 만나면 멈추기 때문에 "coding"까지만 출력됨.
	따라서 명시적으로 \0을 추가하지 않아도 정상적으로 문자열 출력 가능! 🚀

*/
