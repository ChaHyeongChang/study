//문자열 상수 p178 필기

//문자열 상수 : 문자들의 연속된 집합으로, 큰따옴표("")로 감싸서 표현된 값을 의미합니다. 문자열 상수는 char 배열 형태로 저장됨.

/*
문자열 상수의 특징
    1. 문자열 끝에 \0 (null 문자) 자동 추가
      ex)"Hello"는 실제로 메모리 상에서 H, e, l, l, o, \0로 저장됩니다.

    2. 읽기 전용 영역에 저장 : 문자열 상수는 일반적으로 읽기 전용 메모리 영역(텍스트 세그먼트)에 저장되며, 수정할 수 없습니다. 따라서 문자열 상수를 변경하려고 하면 정의되지 않은 동작이 발생할 수 있습니다.
    ex) char *str = "Hello";
        str[0] = 'h';  // 정의되지 않은 동작 (UB)

    3. 배열로 변환 가능 : 문자열 상수는 char 배열로 복사해서 사용할 수 있습니다.
      char str[] = "Hello";  // str은 배열
      str[0] = 'h';          // 배열의 요소는 수정 가능
*/

//문자열 상수 값은 내부적으로 주소로 처리되므로 -->>  문자열 상수 = 주소


//"apple(\0)" --> 큰따옴표로 문자열 상수를 표현하게 되면 우리 눈에는 보이지 않지만 끝에 항상 널문자(\0) 가 들어감
//따라서 "apple"의 실제 길이는 6byte

//내가 apple 이라는 문자열 상수를 쓰게되면 메모리 어딘가에 apple 이라고 저장되고 컴파일러는 apple로 처리되는 것이 아니라 apple이 저장된(정확히 말하면 a가 저장된) 메모리의 주소 값으로 처리가 됨.
//문자열은 컴파일러가 가지고 있는 주소 값부터 널문자(\0) 이전까지로 처리한다.
//문자열 상수의 끝에는 항상 널문자(\0)가 들어가니 문자열 상수의 크기는 실제 저장된 문자열의 길이보다 1이 길다.

#include <stdio.h>

int main(void){

    /*
        printf("%s\n", "apple"); // %s 는 받은 주소부터 널문자(\0) 이전까지 출력
    */
    printf("%s\n", "apple"); 
    printf("%s\n", "apple" + 2); //주소+2부터 널문자 이전까지 출력
    printf("%s\n", "apple" + 4); //주소+4부터 널문자 이전까지 출력

    //"apple" --> 컴파일러는 apple(정확히는 a)이 저장된 주소로 인식 --> 문자열 끝에 항상 널문자(\0)가 들어가므로 크기는 6byte
    //"odd" --> 컴파일러는 odd(정확히는 o)가 저장된 주소로 인식 --> 문자열 끝에 항상 널문자(\0)가 들어가므로 크기는 4byte

    return 0;
}






