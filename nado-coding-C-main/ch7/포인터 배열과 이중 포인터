//p219 a4 [6]필기 (포인터 배열)
/*
#include <stdio.h>

int main(void){

    //int *p1, *p2, *p3, *p4, *p5;
    int *p[5]; // *를 붙이면 포인터를 저장하는 배열, *가 없으면 int 형을 저장하는 배열 ---> 둘 다 이름은 p[0]임
                //p[0] --> int *p[5];에서의 p[0]은 주소를 저장, int p[5];에서의 p[0]는 int형 정수를 저장
                //따라서 *가 2개가 붙든 3개가 붙든 배열의 이름은 p[0]임임

    int a = 3;
    int b = 10;

    p[1] = &a; // p[1]은 포인터 이름 : 포인터를 배열로 선언했기 때문에
    p[3] = &b; // p[3]는 포인터 이름 : 포인터를 배열로 선언했기 때문에

    printf("%d\n", p[1]); // a의 주소
    printf("%d\n", *p[1]); // 3  // *(역참조)p[1](포인터 변수 이름)

    printf("%d\n", p[3]); // b의 주소
    printf("%d\n", *p[3]); // 10 // *(역참조)p[3](포인터 변수 이름)

    return 0;
}
*/



//p219 a4 [7]필기 (포인터 배열과 이중포인터)
//함수의 인수로 배열의 이름을 전달한다는건 배열이 전송되는 것이 아니라 배열이 있는곳의 주소가 전달이 되는 것 : 주소를 받은 포인터 변수가 배열이 있는 곳으로 움직임

//*이 100개 짜리인 포인터는 *이 99개 짜리의 주소를 저장하는 포인터 변수임


#include <stdio.h>

void fun(int *p, int size);

void dummy(int **p1, int size1, int *p2, int size2);

int main(){
    int arr[5] = {1,2,3,4,5};
    int *ptr[5] = {NULL};

    fun(arr, 5);

    dummy(ptr, 5, arr, 5);

    return 0;
}

void fun(int *p, int size){
    printf("%d\n", p[2]); // 3
}

void dummy(int **p1/*포인터에대한 주소를 넘기므로(**)*/, int size1, int *p2/*int형의 배열을 받으므로(*)*/, int size2){
    p1[0] = &p2[0];
    printf("%d\n", p1[0]); // 1 : p1[0]는 p2[0]의 주소를 가리키고 역참조하므로

    p1[3] = &p2[1];
    printf("%d\n", p1[3]); // 2 : p1[3]는 p2[1]의 주소를 가리키고 역참조하므로로
}
