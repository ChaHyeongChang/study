//포인터의 이해 p216 필기

//포인터 : 메모리의 주소를 저장하기 위한 변수 (64bit 컴퓨터에서는 포인터의 크기가 항상 8byte 임)

//&연산자 : 컴퓨터에서 자료는 주소를 기준으로 기억됨. &연산자는 변수의 주소를 알려주는 역할

//참조 : 포인터는 데이터가 저장된 주소값!!을 가리킨다. 

/*역 참조 : - 데이터가 저장된 주소로 가서 값!!!에 접근하는 것.(값에 직접 접근하는것이 아니라 주소를 이용해 간접적으로 접근을 하기 때문에 간접(indirect)연산자 라고도 함),
            - 포인터 변수 앞에 * 연산자를 붙이게 되면, ‘포인터가 가리키는 곳의 값을 참조하겠다’ 라는 뜻이 된다. 포인터를 이용한 메모리 접근방식을 간접접근(Indirect Access)이라하며, 이와 같은 접근이 가능하려면 포인터에 타입이 존재해야 한다.
    --역 참조 원리 --
        1. 포인터가 저장하고 있는 메모리 위치로 간다.
        2. 그곳에 저장된 값에 접근한다. (=포인터가 가리키는 값에 접근한다.) */

/*
#include <stdio.h>

int main(void){
    int i = 10;
    char c = 'A';
    double d = 2.1;

    //포인터 변수 선언;
    int *ip;
    char *cp;
    double *dp;

    //변수의 주소값을 포인터에 대입
    ip = &i; // 틀림 : *ip = &i; ---> *는 연산자이지 *ip가 포인터인 것이 아님!! (ip가 포인터, *ip는 포인터 역참조) 
    cp = &c;
    dp = &d;

    //일반변수의 크기출력
    printf("i = %d바이트\n", sizeof(i)); //4byte
    printf("c = %d바이트\n", sizeof(c)); //1byte
    printf("d = %d바이트\n\n", sizeof(d)); //8byte

    //각 포인터의 크기출력
    printf("ip = %d바이트\n", sizeof(ip)); //8byte (64bit환경에서 포인터의 크기는 항상 8byte)
    printf("cp = %d바이트\n", sizeof(cp)); //8byte
    printf("dp = %d바이트\n", sizeof(dp)); //8byte
    
    return 0;
}
*/


/*
    int a = 5;

    int *p = &a;
    //선언 int *p; --> p는 int형의 주소를 저장하는 포인터
    //초기화 p = &a; ---> 포인터에 주소를 저장하는 것이므로 p(p가 포인터임)가 옳은표현 (*는 연산자(*p가 포인터가 아님!! -> *p는 포인터 역참조))

    a; // 5
    p; // a의 첫번째 주소
    *p; // 5
*/



#include <stdio.h>

int main(void){
    int i = 10;
    char c = 'A';
    double d = 2.1;

    //포인터 변수 선언과 초기값 할당
    int *ip = &i;
    char *cp = &c;
    double *dp = &d;


    /*
    💡포인터의 타입이 일치해야 하는 이유💡
        -int의 주소는 int에 double의 주소는 double에 char의 주소는 char에 ... 저장하는 이유

            --> 포인터에 자장된 주소값이 메모리의 상위 주소값만 저장하기 때문!!

            ex) ip는 i를 가리키는 것이 아니라 i의 상위 주소값을 가리킴, 상위 주소값부터 4byte(int형:4byte, char형:1byte, double형:8byte ...)를 읽어야 10이라는 값을 읽어낼 수 있는데 
                ✅이 주소(ip의값 = i의 첫번째 주소)부터 4byte를 읽어야됨 을 포인터의 자료형을 보고 결정함!!✅

    */

    //각 포인터에 저장된 값(데이터가 저장된 주소값값) 출력
    printf("ip의 주소 = %p\n", ip);
    printf("cp의 주소 = %p\n", cp);
    printf("dp의 주소 = %p\n\n", dp);

    //각 포인터가 가리키는 값(포인터 역참조-->값에 간접적으로 접근) 출력
    printf("*ip = %d\n", *ip);
    printf("*cp = %c\n", *cp);
    printf("*dp = %.2lf", *dp);

    return 0;
}

//포인터를 이용한 값들의 이해
/*
#include <stdio.h>

int main(void){
    int *p;
    int i = 3, j;

    p = &i; //i의 첫번째(상위) 주소값을 포인터p에 저장
    j = *p; //j의 값은 포인터 역참조
    j++;

    printf("%d\n", *p); //3
    printf("%p\n", p); //i의 첫번째(상위) 주소값
    printf("%d\n\n", j); //4

    p = &j;

    printf("%d\n", *p); //4 (p가 가리키는 j의 값값)
    printf("%p\n\n", p); //j의 첫번째(상위) 주소값

    *p = *p + 3;

    printf("%d\n", i); //3
    printf("%d\n", j); //7 (*p = *p + 3; → *p가 j를 가리키므로 j = j + 3 → j = 4 + 3 = 7)
    printf("%d\n\n", *p); //7

    return 0;
}
*/

p219 a4용지 필기
////// 1차원 배열을 함수의 인수로 전달하는 경우 --> 1차원 배열과 포인터의 관계를 알 수 있음 //////

//배열의 이름은 포인터이므로 배열을 전송할 때에는 무조건 포인터로 받는다!!

/*
#include <stdio.h>

void fun(int *p);

int main(void){

    int arr[5] = {5, 6, 7, 8, 9};

    fun(arr); // arr을 전달한다는건 배열을 넘기는 것이 아니라 배열의 시작주소를 전달하는 것! --> 함수의 매개변수를 포인터로 받음음

    return 0;
}

void fun(int *p){ //배열의 이름은 포인터이므로 배열을 전송할 때에는 무조건 포인터로 받는다!!
    for(int i = 0; i < 5; i++){
        printf("%d ", p[i]); 
        // *(p + 2) == p[2] 일치함
    }
}
*/
